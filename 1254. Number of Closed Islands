class Solution {
public:
    int closedIsland(vector<vector<int>>& grid) {
        int f=0;
        col=grid.size();
        row=grid[0].size();
        vector<vector<int>> d(col, vector<int>(row,0));
        for(int i=0; i<col; i++){
            for(int j=0; j<row; j++){
                f++;
                helper(grid, j, i, f, d);
            }
        }
        // cout << total.size() << endl;
        return total.size() - notClose.size();
    }
    void helper(vector<vector<int>>& grid, int r, int c, int f, vector<vector<int>>& d){

        if(c<0 || c>=col || r<0 || r>=row)
            return;
        if(d[c][r] > 0 || grid[c][r] == 1)
            return;

        
        d[c][r] = f;
        total.insert(f);
        if(c==0 || c==col-1 || r==0 || r==row-1)
            notClose.insert(f);
        helper(grid, r-1, c, f, d);
        helper(grid, r+1, c, f, d);
        helper(grid, r, c-1, f, d);
        helper(grid, r, c+1, f, d);
    }
private:
    int row;
    int col;
    set<int> total;
    set<int> notClose;
};
