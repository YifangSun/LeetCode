typedef pair<int, int> pr;
class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        row=matrix.size();
        col=matrix[0].size();
        vector<vector<int>> d(row,vector<int>(col,0));
        int lvl=0;
        queue<pr> q;
        for(int i=0; i<row; i++)
            for(int j=0; j<col; j++)
                if(matrix[i][j]==0){
                    d[i][j]=1;
                    if( isLegal(d, i-1, j) && matrix[i-1][j]==1 ){  q.push(pr(i-1, j)); d[i-1][j]=1;    }
                    if( isLegal(d, i+1, j) && matrix[i+1][j]==1 ){  q.push(pr(i+1, j)); d[i+1][j]=1;    }
                    if( isLegal(d, i, j-1) && matrix[i][j-1]==1 ){  q.push(pr(i, j-1)); d[i][j-1]=1;    }
                    if( isLegal(d, i, j+1) && matrix[i][j+1]==1 ){  q.push(pr(i, j+1)); d[i][j+1]=1;    }
                }
        while(!q.empty()){
            lvl++;
            int num=q.size();
            while(num--){
                pr t=q.front(); q.pop();
                int i=t.first, j=t.second;
                matrix[i][j] = lvl;
                if( isLegal(d, i-1, j) ){  q.push(pr(i-1, j)); d[i-1][j]=1;  }
                if( isLegal(d, i+1, j) ){  q.push(pr(i+1, j)); d[i+1][j]=1;  }
                if( isLegal(d, i, j-1) ){  q.push(pr(i, j-1)); d[i][j-1]=1;  }
                if( isLegal(d, i, j+1) ){  q.push(pr(i, j+1)); d[i][j+1]=1;  }
            }
        }
        return matrix;
    }
    
    bool isLegal(vector<vector<int>>& d, int r, int c){
        if(r<0 || r>=row || c<0 || c>=col)  return false;
        else if( d[r][c]==1 )     return false;
        return true;
    }
        
private:
    int row, col;
};
