/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if( !root ) return ans;
        helper(ans, 0, root);
        return ans;
    }
    
    void helper(vector<vector<int>>& ans, int level, TreeNode* t){
        
        if( level >= ans.size() )
            ans.push_back( { t->val } );
        else
            ans[level].push_back(t->val);
        
        if(!t->left && !t->right)   return;
            
        if(t->left){
            helper(ans, level+1, t->left);
        }
        
        if(t->right){
            helper(ans, level+1, t->right);
        }        
        
        return;
    }
};

/**
 * Solution 2
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if(root == nullptr) return ans;
        
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            vector<int> this_level;
            int num = q.size();
            while(num--) {
                TreeNode* now = q.front();
                q.pop();
                this_level.push_back(now->val);
                    
                if(now->left) {
                    q.push(now->left);
                }
                if(now->right) {
                    q.push(now->right);
                }
            }
            ans.push_back(this_level);
        }
        
        
        
        return ans;
    }
};
