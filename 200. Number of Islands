class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        row = grid.size();
        if(!row) return 0;
        
        col = grid[0].size();
        int cnt = 0;
        set<int> m;
        vector<int> temp(col,0);
        vector<vector<int>> d(row,temp);
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                dfs(i,j,++cnt,grid,d);   
            }
        }
        
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(grid[i][j]=='1' && m.count(d[i][j])==0)
                    m.insert(d[i][j]);
            }
        }
        return m.size();
    }
    
    void dfs(int r, int c, int n, vector<vector<char>>& grid, vector<vector<int>>& d){
        if(r>=row || r<0 || c>=col || c<0)  return;
        if(d[r][c]>0 || grid[r][c]=='0') return;
        d[r][c] = n;
        dfs(r+1, c, n, grid, d);
        dfs(r-1, c, n, grid, d);
        dfs(r, c+1, n, grid, d);
        dfs(r, c-1, n, grid, d);
        return;
    }
    
private:
    int row;
    int col;
};
