class Solution {
public:
    void solve(vector<vector<char>>& board) {
        vector<vector<char>> nu;
        if(board == nu) return;
        row = board.size();
        col = board[0].size();
        
        vector<int> init(col,0);
        vector<vector<int>> d(row,init);
        set<int> se;
        int idx=0;
        
        for(int i=0; i<row; i++)
            for(int j=0; j<col; j++)
                dfs(i, j, ++idx, board, d);
                
        /*****if block on the border*****/
        for(int i=0; i<row; i++)
            if(board[i][0] == 'O')
                se.insert(d[i][0]);
        for(int i=0; i<row; i++)
            if(board[i][col-1] == 'O')
                se.insert(d[i][col-1]);
        for(int i=0; i<col; i++)
            if(board[0][i] == 'O')
                se.insert(d[0][i]);
        for(int i=0; i<col; i++)
            if(board[row-1][i] == 'O')
                se.insert(d[row-1][i]);
        
        /*****modify board*****/
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(board[i][j]=='O' && se.count(d[i][j]) == 0)
                    board[i][j] = 'X';
            }
        }
    }

    void dfs(int r, int c, int n, vector<vector<char>>& board, vector<vector<int>>& d){
        if(r>=row || r<0 || c>=col || c<0)  return;
        if(d[r][c]>0 || board[r][c]=='X') return;
        d[r][c] = n;
        dfs(r+1, c, n, board, d);
        dfs(r-1, c, n, board, d);
        dfs(r, c+1, n, board, d);
        dfs(r, c-1, n, board, d);
        return;
    }

private:
    int row,col;
};
