class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        row=grid.size();
        if(row==0)  return -1;
        col=grid[0].size();
        if(col==0)  return -1;
        int dist=-1;
        bool noZero=true;
        typedef pair<int, int> pr;
        queue<pr> q;
        for(int r=0; r<row; r++)
            for(int c=0; c<col; c++){
                if(grid[r][c]==1){
                    q.push(pr(r,c));
                    grid[r][c]=-1; 
                }
                if(grid[r][c]==0) noZero=false;
            }
        if(noZero)  return -1;
    
        while(!q.empty()){
            int num=q.size();
            //cout << "num:" << num << endl; 
            while(num--){
                int r=q.front().first, c=q.front().second;
                q.pop();
                if(legal(r+1, c) && grid[r+1][c]!=-1){
                    q.push(pr(r+1, c));
                    grid[r+1][c]=-1;                                  
                }
                if(legal(r-1, c) && grid[r-1][c]!=-1){
                    q.push(pr(r-1, c));
                    grid[r-1][c]=-1;                                  
                }   
                if(legal(r, c+1) && grid[r][c+1]!=-1){
                    q.push(pr(r, c+1));
                    grid[r][c+1]=-1;                                  
                }   
                if(legal(r, c-1) && grid[r][c-1]!=-1){
                    q.push(pr(r, c-1));
                    grid[r][c-1]=-1;                                  
                }   
                //if(num==0) cout << r << " " << c << " | ";
            }
            dist++;
            // cout << dist << endl;
        }
        return dist;
    }
    inline bool legal(int r, int c){
        return r>=0 && r<row && c>=0 && c<col;
    }
private:
    int row, col;
};
