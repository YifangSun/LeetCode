class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size();
        int m=obstacleGrid[0].size();
        if(m==0 || n==0 || obstacleGrid[n-1][m-1]==1)    return 0;
        long long int d[n][m];
        memset(d, 0, sizeof(d));
        d[n-1][m-1] = obstacleGrid[n-1][m-1] ? 0 : 1;
        for(int i=m-2; i>=0; i--){
            if(obstacleGrid[n-1][i]==1)   d[n-1][i]=0;
            else d[n-1][i]=d[n-1][i+1];
        }  
        for(int i=n-2; i>=0; i--){
            if(obstacleGrid[i][m-1]==1)   d[i][m-1]=0;
            else d[i][m-1]=d[i+1][m-1];
        }  
        for(int i=m-2; i>=0; i--)
            for(int j=n-2; j>=0; j--){
                if(obstacleGrid[j][i]==1)   d[j][i]=0;
                else    d[j][i]=d[j+1][i]+d[j][i+1];
                cout << d[j][i] << " ";
            }
        /*
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++)
                cout << d[i][j] << " ";
            cout << endl;
        }  */
        return (int)d[0][0];
    }
};
