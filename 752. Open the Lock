class Solution {
public:
    
    unordered_set<string> dend;
    unordered_set<string> se;
    int openLock(vector<string>& deadends, string target) {
        if(target == "0000")    return 0;
        for(string& w:deadends)
            dend.insert(w);
        if( dend.count("0000") )    return -1;
        char next[100][2];
        for(char k='1'; k<='8'; k++){
            next[k][0] = k-1;
            next[k][1] = k+1;
        }
        next['0'][0] = '9';
        next['0'][1] = '1';
        next['9'][0] = '8';
        next['9'][1] = '0';
        
        int ans = 0;
        queue<string> q;
        q.push(target);
        while(!q.empty()){
            ans++;
            queue<string> nq;
            while(!q.empty()){
                string s = q.front(); q.pop();
                for(int i=0; i<s.size(); i++){
                    char t = s[i];
                    for(char k:next[t]){
                        string key = s.substr(0, i) + k + s.substr(i+1);
                        if( key == "0000" )
                            return ans;
                        if( !se.count(key) && !dend.count(key) ){
                            nq.push(key);
                            se.insert(key);
                        }                        
                    }
                }
            }
            swap(q, nq);
        }
        return -1;
    }
};
