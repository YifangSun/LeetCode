const int N = 100;
bool dp[N][N];

class Solution {
public:
    bool isMatch(string s, string p)
    {
        memset(dp, 0, sizeof(dp[0][0]) * N * N);
        dp[s.length()][p.length()] = true;
        for (int i=s.length();i>=0;--i)
            for (int j=p.length() - 1;j>=0;--j)
            {
                if (p[j] == '*')
                    dp[i][j] = false;
                else if (i == s.length()) // s[i:] is empty
                {
                    if (j + 1 < p.length() && p[j + 1] == '*') // if p[j+1] exists and it is '*'
                    {
                        dp[i][j] = dp[i][j+2];
                    }
                    else
                        dp[i][j] = false;
                }
                else // s[i:] is not empty
                {
                    if (j + 1 < p.length() && p[j + 1] == '*') // if p[j+1] exists and it is '*'
                    {
                        if (s[i] == p[j] || p[j] == '.')
                            dp[i][j] = dp[i][j+2] || dp[i + 1][j];
                        else
                            dp[i][j] = dp[i][j+2];
                    }
                    else
                    {
                        if (s[i] == p[j] || p[j] == '.')
                            dp[i][j] = dp[i+1][j+1];
                        else 
                            dp[i][j] = false;
                    }
                }
            }
        return dp[0][0];
    }
};
