/***************************************
SOLUTION 1
***************************************/
int binarySearch(vector<int>& nums, int x, int y, int k){
    int m;
    while(x<y){
        m = (y+x)/2;
        if(nums[m] == k) return m;
        else if (nums[m] < k) x = m+1;
        else if (nums[m] > k) y = m;       
    }
    return -1;
    
}

void dp(vector<int>& nums, int x, int y, vector<vector<int>>& ans,bitset<10000000>& bits){
    int len = nums.size();
    int t;
    vector<int> i;
    if( bits.test(x*len+y) ) return;

    bits.set(x*len+y);
    //cout << "enter:" << x << " " << y << endl;
    
    if( (y-x)==2 ){
        if(nums[x]+nums[x+1]+nums[y] == 0 ){
            i.push_back(nums[x]);
            i.push_back(nums[x+1]);
            i.push_back(nums[y]);
            ans.push_back(i);
            //cout << "case 1" << endl;
        }
        return;
    }else if((y-x)<2) return;
    
    int sum = nums[x] + nums[y];
    
    if(sum + nums[x+1] > 0) {
        //cout << "case 6" << endl;
        dp(nums,x,y-1,ans,bits);
    }
    else if(sum + nums[y-1] < 0) {
        //cout << "case 7" << endl;
        dp(nums,x+1,y,ans,bits);
    }else{
        if( (t=binarySearch(nums,x,y,-1*sum)) != -1 ){
            i.push_back(nums[x]);
            i.push_back(nums[t]);
            i.push_back(nums[y]);
            ans.push_back(i);
            //cout << "case 4" << endl;
            //cout << nums[x] << " " << nums[t] << " " << nums[y] << endl;
        } 
        //cout << "case 5" << endl;
        //cout << x << " " << y << endl;
        while(x<=len-3 && nums[x] == nums[x+1] && nums[x+1] == nums[x+2]) {
            //cout<<"x+1:"<< nums[x] << " " << nums[x+1] << " " << nums[x+2] <<endl;
            x++;
        }
        while(y>=2 && nums[y] == nums[y-1] && nums[y-1] == nums[y-2]) y--;
        //cout << x << " " << y << endl;
        dp(nums,x+1,y,ans,bits);
        dp(nums,x,y-1,ans,bits);
        return;
    }
    
    //cout << "last" << endl;
    return;
}

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        bitset<10000000> bits(0);
        vector<vector<int>> ans;
        if(nums.size() == 0)    return ans;
        sort( nums.begin() , nums.end() );
        dp(nums,0,nums.size()-1,ans,bits);
        sort(ans.begin(), ans.end());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        return ans;
    }
};



/***************************************
SOLUTION 2
***************************************/
class Solution
{
public:
    vector<vector<int> > threeSum(vector<int> &num)
    {
        vector<vector<int>> rs;
        int len = num.size();
        if(len == 0)
            return rs;
        sort(num.begin(),num.end());
        for(int i = 0; i < len; i++)
        {
            int j = i + 1;
            int k = len - 1;
            if(i != 0 && num[i] == num[i - 1])//如果遇到重复元素的情况，避免多次考虑
                continue;
            while(j < k)//对于每一个num[i]从i之后的元素中,寻找对否存在三者之和为0的情况
            {
                if(num[i] + num[j] +num[k] == 0)//当三者之和为0的情况
                {
                    rs.push_back({num[i],num[j],num[k]});
                    j++;//当此处的j,k满足时，别忘了向前/向后移动，判断下一个是否也满足
                    k--;
                    while(j < k && num[j] == num[j - 1])//如果遇到j重复的情况，也要避免重复考虑
                        j++;
                    while(j < k && num[k] == num[k + 1])//如果遇到k重复的情况，也要避免重复考虑
                        k--;
                }
                else if(num[i] + num[j] + num[k] < 0)//三者之和小于0的情况，说明num[j]太小了，需要向后移动
                    j++;
                else//三者之和大于0的情况，说明num[k]太大了，需要向前移动
                    k--;
            }
        }
        return rs;
    }
};
