/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        uint64_t size = 0x1 << 14;
        vector<TreeNode*> v(size);
        queue<TreeNode*> q;
        q.push(root);
        int idx = 0, end_level = 0;
        while(!q.empty()) {
            int num = q.size();
            while(num--) {
                TreeNode* t = q.front();   q.pop();
                if(t->left) {
                    q.push(t->left);
                    q.push(t->right);
                }
                v[idx++] = t;
            }
            end_level++;
        }
        

        for (int l = 0; l < end_level; l++) {
            if (l == end_level - 1) { //last level
                break;
            }
            
            cout << "level " << l << endl;
            int bg = (0x1 << l) - 1, ed = (0x1 << (l + 1)) - 1; // can NOT equal ed
            int nx_bg = ed, nx_ed = (0x1 << (l + 2)) - 1;
            cout << bg << " " << ed << endl;
            cout << nx_bg << " " << nx_ed << endl;

            if (l % 2 == 0) { //even, this level -> revsersed next level
                for (int i = bg; i < ed; i++) {
                    v[i]->left = v[--nx_ed];
                    // cout << v[i]->val << ": " <<  v[nx_ed]->val << ", " <<  v[nx_ed-1]->val << endl;
                    v[i]->right = v[--nx_ed];
                }
            } else { // odd, revsersed this level -> next level
                for (int i = ed - 1; i >= bg; --i) {
                    v[i]->left = v[nx_bg++];
                    // cout << v[i]->val << ": " <<  v[nx_bg-1]->val << ", " <<  v[nx_bg]->val << endl;
                    v[i]->right = v[nx_bg++];
                }
            }
        }
        return root;
    }
};
